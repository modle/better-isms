code
-everything should be final unless there's a reason for it not to be
-static vars are more global; try hard not to make them mutable
-a provider is something that's orthogonal to the rest of the application and provides functionality separate from everything else; like plugins
-reuse existing exceptions wherever possible
-make fields private unless needed for some reason
-packages are units of release
-all packages should have loose coupling
-all classes within a package should have tight cohesion
-no cyclical dependencies between packages
*imports indicate dependencies
*if inside the same package, import is not needed
-the database layer shouldn't know anything about the web service and vice versa. No 404s at DB layer.
-entities should have no dependencies
-the more things depending on a class, the more stable it should be
-use interfaces wherever possible
-don't pass nulls
-put boundaries around the crazy stuff
-Postel's law: be generous in what you accept, but conservative in what you provide
* smaller surface area is best, so consumers don't get dependent on ancillary fields
-SFTA: Stream Filter Transform Accumulate
-when presenting the product, help the stakeholder/user feel confident it is done is a workmanlike fashion
-always merge from most stable to least stable
-avoid information hiding in tests - leads to confusion
-TDD: do the simplest thing that can possibly work to make the tests pass
-When pairing and not the driver: provide suggestions instead of telling partner what to do
-use import static instead of static cross-reference: import ClassName.method instead of direct reference in code ClassName.method
-null checks all over = code smell
-have one primary constructor; all other constructors in the class do a conversion and pass to primary
-sentinal values in code = code smell; don't use them for flow control
-don't use exceptions for flow control
-if it can be null, it will be null
-the golden rule of programming: do unto others as you would have them do unto you. aka: common decency. Don't code like a jerk.
-Golden Clone - a stable representation of something with a standard set of features, instances of which can be implemented and customized
-BDUF - Big Design Up Front - the waterfall model. Hard to pivot due to time investment (sunk cost fallacy). Best avoided.
-When writing an API, think about how you would like using it
-Liskov Substitution Principle: Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it
-Test Names
*Happy path: shouldHaveThing
*Sad path: thingThatIsWrongShouldFail
-when code reviewing, seek to understand why something is the way it is
-Transitive dependency: occurs when a non-key attribute determines another non-key attribute; dependencies outside our control
-Protocol Oriented Lanugage - a language which allows protocols to be extended
-improving code skills
*contribute to open source
*write code from scratch
*kata exercises
*get better at TDD
-no broken windows
general
-always have eyes for waste
-Hawthing Effect - the act of measuring influences the measurement itself
-shu ha ri - beginner (shu): repeat using set instructions; ha: vary slightly, explore boundaries; ri: create new techniques
-an investment in knowledge always pays the best interest
-the painting can become lost in the paint - know when to stop
-be a catalyst for change but remember the big picture
-every failure can be transformed into an insight
-overlearn: after completing a task, spend time to review, repeat, enhance, conclude
-when prioritizing tasks, ask yourself what is the next right thing you can do?
-jokes and sarcasm are provocative communication techniques, akin to denial and blame
-define small deliverables (ask many actionable questions)
-when deciding if a project will be successful, practice remember the future journaling/review
-the MoSCoW method - must (have to do), should (has business value, do if can), could (might have business value), won't (save for later)
